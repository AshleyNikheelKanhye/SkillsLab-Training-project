using DataLibrary.Entities;
using DataLibrary.Entities.EntitiesInterface;
using DataLibrary.Repository.DataBaseHelper;
using DataLibrary.Repository.RepoInterfaces;
using DataLibrary.ViewModels;
using Microsoft.SqlServer.Server;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataLibrary.Repo
{
    public class UserDAL : IUserDAL
    {
        DBContext _dbContext;
        public UserDAL(DBContext dbContext)
        {
            _dbContext = dbContext;
        }

        public IUser Add(IUser user) 
        {
            string insertQuery = "INSERT INTO [dbo].[UserTable] (FirstName,LastName,Password,Email,NIC,PhoneNo,DepartmentID,ManagerID) VALUES " +
                                "(@FirstName,@LastName,@Password,@Email,@NIC,@PhoneNo,@DepartmentID,@ManagerID);";
            try
            {
                SqlCommand cmd = new SqlCommand(insertQuery, _dbContext.GetConn());

                cmd.Parameters.AddWithValue("@FirstName", user.FirstName);
                cmd.Parameters.AddWithValue("@LastName", user.LastName);
                cmd.Parameters.AddWithValue("@Password", user.Password);
                cmd.Parameters.AddWithValue("@Email", user.Email);
                cmd.Parameters.AddWithValue("@NIC", user.NIC);
                cmd.Parameters.AddWithValue("@PhoneNo", user.PhoneNo);
                //cmd.Parameters.AddWithValue("@Role", user.Role);
                cmd.Parameters.AddWithValue("@DepartmentID", user.DepartmentID);
                cmd.Parameters.AddWithValue("@ManagerID", user.ManagerID);

                cmd.ExecuteNonQuery();

                //refetch the the user to get the autogenerated ID
                IUser registeredUser = Find(user.Email);
                return registeredUser;
            }
            catch (Exception ex) { return null; }
        }


        public bool CheckUserExists(string Email, string NIC, int PhoneNo)
        {
            string searchQuery = "SELECT Count(UserID) FROM UserTable where Email = @Email OR NIC = @NIC OR PhoneNo = @PhoneNo ";
            try
            {
                SqlCommand cmd = new SqlCommand(searchQuery, _dbContext.GetConn());
                cmd.Parameters.AddWithValue("@Email", Email);
                cmd.Parameters.AddWithValue("@NIC", NIC);
                cmd.Parameters.AddWithValue("@PhoneNo", PhoneNo);
                int rowCount = (int)cmd.ExecuteScalar();
                if(rowCount > 0) { return true; }
                else { return false; }
            }
            catch(Exception ex) { return false; }
        }

        public IUser Find(string email)
        {
            try {
                string selectQuery = "SELECT UserID,Email,FirstName,LastName,NIC,PhoneNo,Password,DepartmentID,ManagerID " +
                                        "FROM [UserTable] WHERE Email = @Email AND IsActive=1 ";
                SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
                command.Parameters.AddWithValue("@Email", email);
                SqlDataReader reader = command.ExecuteReader();

                if (reader.Read())
                {
                    IUser retrievedUser = DataBaseHelper.ReturnSingleRowFromDB<User>(reader);
                    reader.Close();
                    return retrievedUser;
                }
                reader.Close();
                return null;
            }
            catch(Exception ex) { return null; }
        }

        public IEnumerable<ListOfManagersModel> GetAllManagers()
        {
            try
            {
                List<ListOfManagersModel> list = new List<ListOfManagersModel>();
                SqlCommand command = new SqlCommand("SELECT UserID,FirstName,LastName FROM UserTable WHERE Role = @Role", _dbContext.GetConn());
                command.Parameters.AddWithValue("@Role", "manager"); // TODO: change that to enum later
                SqlDataReader reader = command.ExecuteReader();

                int userID;
                string firstname;
                string lastname;

                while (reader.Read())
                {
                    userID = (int)reader["UserID"];
                    firstname = (string)reader["FirstName"];
                    lastname= (string)reader["LastName"];
                    list.Add(new ListOfManagersModel() {  UserID= userID , FirstName = firstname , LastName=lastname});
                }
                reader.Close();
                return list;
            }
            catch (Exception ex) { return null; }
        }

        public List<int> GetRoleList(int userID)
        {
            List<int> listofRoleIds = new List<int>();
            string selectQuery = "SELECT ur.RoleID " +
                                "FROM (UserRole ur INNER JOIN Role r ON ur.RoleID = r.RoleID) " +
                                "WHERE ur.UserID = @UserID";
            SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
            command.Parameters.AddWithValue("@UserID", userID);
            SqlDataReader reader = command.ExecuteReader();
            int roleID;
            while (reader.Read())
            {
                roleID = (int)reader["RoleID"];
                listofRoleIds.Add(roleID);
            }

            return listofRoleIds;
        }

        public IEnumerable<IUser> GetAll()
        {
            throw new NotImplementedException();
        }
        public IUser GetById(int userID)
        {
            throw new NotImplementedException();
        }

        public void Update(IUser user)
        {
            throw new NotImplementedException();
        }
        public void Delete(int userID)
        {
            throw new NotImplementedException();
        }

    }
}
