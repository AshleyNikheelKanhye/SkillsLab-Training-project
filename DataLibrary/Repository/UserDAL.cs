using DataLibrary.Entities;
using DataLibrary.Entities.EntitiesInterface;
using DataLibrary.Repository.DataBaseHelper;
using DataLibrary.Repository.RepoInterfaces;
using DataLibrary.ViewModels;
using Microsoft.SqlServer.Server;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Helpers;

namespace DataLibrary.Repo
{
    public class UserDAL : IUserDAL
    {
        DBContext _dbContext;
        public UserDAL(DBContext dbContext)
        {
            _dbContext = dbContext;
        }

        public IUser Add(RegisterEmployeeViewModel user)
        {
            string insertQuery = "INSERT INTO [dbo].[UserTable] (FirstName,LastName,Password,Email,NIC,PhoneNo,DepartmentID,ManagerID) VALUES " +
                                "(@FirstName,@LastName,@Password,@Email,@NIC,@PhoneNo,@DepartmentID,@ManagerID);";
            try
            {
                SqlCommand cmd = new SqlCommand(insertQuery, _dbContext.GetConn());

                cmd.Parameters.AddWithValue("@FirstName", user.FirstName);
                cmd.Parameters.AddWithValue("@LastName", user.LastName);
                cmd.Parameters.AddWithValue("@Password", user.Password);
                cmd.Parameters.AddWithValue("@Email", user.Email);
                cmd.Parameters.AddWithValue("@NIC", user.NIC);
                cmd.Parameters.AddWithValue("@PhoneNo", user.PhoneNo);
                cmd.Parameters.AddWithValue("@DepartmentID", user.DepartmentID);
                cmd.Parameters.AddWithValue("@ManagerID", user.ManagerID);

                cmd.ExecuteNonQuery();

                //refetch the the user to get the autogenerated ID
                IUser registeredUser = Find(user.Email);
                //need to insert role in userRole Table
                bool result = AssignRoleToUser(registeredUser.UserID, 3);  //TODO : change that role ID= 3 for employee to enum
                if (result) { return registeredUser; }
                else { return null; }

            }
            catch { return null; }
        }

        public bool AssignRoleToUser(int userID,int RoleID)
        {
            try
            {
                string insertQuery = "INSERT INTO UserRole VALUES(@UserID,@RoleID)";
                SqlCommand cmd = new SqlCommand( insertQuery, _dbContext.GetConn());
                cmd.Parameters.AddWithValue("@UserID", userID);
                cmd.Parameters.AddWithValue("@RoleID", RoleID);
                int rowsAffected = cmd.ExecuteNonQuery();
                if (rowsAffected > 0) { return true; }
                return false;

            }catch { return false; } 
        }

        public bool CheckUserExists(string Email, string NIC, int PhoneNo)
        {
            string searchQuery = "SELECT Count(UserID) FROM UserTable where Email = @Email OR NIC = @NIC OR PhoneNo = @PhoneNo ";
            try
            {
                SqlCommand cmd = new SqlCommand(searchQuery, _dbContext.GetConn());
                cmd.Parameters.AddWithValue("@Email", Email);
                cmd.Parameters.AddWithValue("@NIC", NIC);
                cmd.Parameters.AddWithValue("@PhoneNo", PhoneNo);
                int rowCount = (int)cmd.ExecuteScalar();
                if (rowCount > 0) { return true; }
                else { return false; }
            }
            catch { return false; }
        }

        public IUser Find(string email)
        {
            try {
                string selectQuery = "SELECT UserID,Email,FirstName,LastName,NIC,PhoneNo,Password,DepartmentID,ManagerID " +
                                        "FROM [UserTable] WHERE Email = @Email AND IsActive=1 ";
                SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
                command.Parameters.AddWithValue("@Email", email);
                SqlDataReader reader = command.ExecuteReader();

                if (reader.Read())
                {
                    IUser retrievedUser = DataBaseHelper.ReturnSingleRowFromDB<User>(reader);
                    reader.Close();
                    return retrievedUser;
                }
                reader.Close();
                return null;
            }
            catch { return null; }
        }

        public IEnumerable<ListOfManagersModel> GetAllManagers()
        {
            try
            {
                List<ListOfManagersModel> list = new List<ListOfManagersModel>();
                string selectQuery = "SELECT ut.UserID,FirstName,LastName " +
                                     "FROM UserTable ut INNER JOIN UserRole ur ON ut.UserID=ur.UserID " +
                                     "WHERE ur.RoleID = 2"; //manager has roleID = 2
                SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
                SqlDataReader reader = command.ExecuteReader();

                int userID;
                string firstname;
                string lastname;

                while (reader.Read())
                {
                    userID = (int)reader["UserID"];
                    firstname = (string)reader["FirstName"];
                    lastname = (string)reader["LastName"];
                    list.Add(new ListOfManagersModel() { UserID = userID, FirstName = firstname, LastName = lastname });
                }
                reader.Close();
                return list;
            }
            catch { return null; }
        }

        public List<int> GetRoleList(int userID)
        {
            List<int> listofRoleIds = new List<int>();
            string selectQuery = "SELECT ur.RoleID " +
                                "FROM (UserRole ur INNER JOIN Role r ON ur.RoleID = r.RoleID) " +
                                "WHERE ur.UserID = @UserID";
            SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
            command.Parameters.AddWithValue("@UserID", userID);
            SqlDataReader reader = command.ExecuteReader();
            int roleID;
            while (reader.Read())
            {
                roleID = (int)reader["RoleID"];
                listofRoleIds.Add(roleID);
            }
            reader.Close();
            return listofRoleIds;
        }

        public List<Role> GetRoles(int userID)
        {
            try
            {
                List<Role> listOfRoles = new List<Role>();
                string selectQuery = "SELECT ur.RoleID,r.RoleName " +
                                    "FROM UserRole ur INNER JOIN Role r ON ur.RoleID = r.RoleID " +
                                    "WHERE ur.UserID = @userID";
                SqlCommand command = new SqlCommand( selectQuery, _dbContext.GetConn());
                command.Parameters.AddWithValue("@userID", userID);
                SqlDataReader reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    listOfRoles = DataBaseHelper.ReturnAllRowsFromDB<Role>(reader);
                }
                reader.Close();
                return listOfRoles;
            }
            catch { throw; }
        }

        public string GetManagerEmailOfEmployee(int userID)
        {
            try
            {
                string managerEmail = "";
                string selectQuery = " SELECT Email FROM UserTable WHERE UserID = (SELECT ManagerID FROM UserTable WHERE UserID=@UserID) ";
                SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
                command.Parameters.AddWithValue("@UserID", userID);
                SqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    managerEmail = (string)reader["Email"];
                }
                reader.Close();
                return managerEmail;

            } catch (Exception ex) { throw ex; }
        }

        public int GetManagerIDOfEmployee(int userID)
        {
            try
            {
                int managerID = -1;
                string selectQuery = "SELECT ManagerID FROM UserTable WHERE UserID = @userid";
                SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
                command.Parameters.AddWithValue("@userid", userID);
                SqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    managerID = (Int32)reader["ManagerID"];
                }
                reader.Close();
                return managerID;
            }catch { throw; }
        }

        public string GetFullName(int userID)
        {
            try
            {
                string UserFullName = "";
                string selectQuery = " SELECT FirstName,LastName FROM UserTable WHERE UserID = @UserID ";
                SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
                command.Parameters.AddWithValue("@UserID", userID);
                SqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    UserFullName = (string)reader["FirstName"] +" " + (string)reader["LastName"];
                }
                reader.Close();
                return UserFullName;
            }
            catch(Exception ex) { throw ex; }  
        }

        public async Task<IEnumerable<IUser>> GetAll()
        {
            try
            {
                List<User> list = new List<User>();
                string selectQuery = "SELECT UserID, Email, FirstName, LastName, NIC, PhoneNo, Password, ut.DepartmentID, ManagerID, DepartmentName " +
                    "FROM  UserTable ut  INNER JOIN Department d ON ut.DepartmentID = d.DepartmentID " +
                    "ORDER BY ut.CreatedOn DESC ";

                SqlCommand command = new SqlCommand(selectQuery,_dbContext.GetConn());
                SqlDataReader reader = await command.ExecuteReaderAsync();
                if(reader.HasRows)
                {
                    list = DataBaseHelper.ReturnAllRowsFromDB<User>(reader);    
                }
                reader.Close();
                return list;
            }
            catch { throw; }
        }

        public async Task<int> GetTotalNumberOfUserRecords()
        {
            try
            {
                string selectQuery = "SELECT COUNT(UserID) as 'RowCount' FROM UserTable WHERE IsActive =1 ";
                SqlCommand command = new SqlCommand( selectQuery,_dbContext.GetConn());
                return (int)  await command.ExecuteScalarAsync();

            }
            catch { throw; }
        }
        public async Task<IUser> GetById(int userID)
        {
            try
            {
                User user = new User();
                string selectQuery = "SELECT UserID, Email, FirstName, LastName, NIC, PhoneNo, Password, ut.DepartmentID, ManagerID, DepartmentName " +
                                      "FROM  UserTable ut  INNER JOIN Department d ON ut.DepartmentID = d.DepartmentID " +
                                      "WHERE UserID = @UserID ";
                SqlCommand command = new SqlCommand(selectQuery, _dbContext.GetConn());
                command.Parameters.AddWithValue("@UserID", userID);
                SqlDataReader reader = await command.ExecuteReaderAsync();
                if (reader.Read())
                {
                    user = DataBaseHelper.ReturnSingleRowFromDB<User>(reader);
                    reader.Close();
                    return user;
                }
                reader.Close();
                return null;
            }
            catch
            {
                throw;
            }
        }

        public async Task<IEnumerable<IUser>> GetEmployeesUnderManager(int managerId)
        {
            try
            {
                List<User> list = new List<User>();
                string selectQuery = @"SELECT FirstName , LastName, Email,PhoneNo FROM UserTable WHERE ManagerID=@managerID ";
                SqlCommand command = new SqlCommand(selectQuery,_dbContext.GetConn());
                command.Parameters.AddWithValue("@managerID", managerId);

                SqlDataReader reader = await command.ExecuteReaderAsync();
                if (reader.HasRows)
                {
                    list = DataBaseHelper.ReturnAllRowsFromDB<User>(reader);
                }
                reader.Close();
                return list;
            }
            catch { throw; }
        }

        public void Update(IUser user)
        {
            throw new NotImplementedException();
        }
        public void Delete(int userID)
        {
            throw new NotImplementedException();
        }

    }
}
