
@{
    ViewBag.Title = "ViewTrainingsView";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>

    body {
        font-family: Arial, sans-serif;
        background-image: url("../../Images/background.jpg");
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-size: 100% 100%;
        margin: 0;
        padding: 0;
    }

    #second-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 50px;
    }

    .content {
        display: none;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 15px;
    }

    #updatePopupDiv {
        justify-content: center;
        align-items: center;
        
        padding: 1px;
    }

    label {
        display: block;
        margin-bottom: 8px;
    }

    #form-div {
        background-color: #3e92cc;
        display: flex;
        align-content: center;
        justify-content: center;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 1000px;
        color:#ffffff;
        margin: 0;
    }

    .TableViewDiv {
        background-color: #ffffff;
        padding: 10px;
        border-radius: 8px;
        margin: 20px;
    }

        .TableViewDiv table {
            border-collapse: collapse;
            width: 100%;
        }

    .requestsTable th, .requestsTable td {
        padding: 10px;
        text-align: left;
        border: 1px solid #b2dfdb;
        border-radius: 5px;
    }

    .requestsTable th {
        background-color: #e0f2f1;
        color: #000000;
    }

    .requestsTable tbody tr {
        background-color: #ffffff;
    }

        .requestsTable tbody tr:nth-child(even) {
            background-color: #ccffff;
        }

        .requestsTable tbody tr:nth-child(odd) {
            background-color: #ffffff;
        }
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.all.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script>
    $(document).ready(function () {
        $('nav .nav-container a').removeClass('active');
        $('#adminTrainings').addClass('active');

        let form = document.querySelector('form');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            return false;
        });

        //dropdown select options
        $('#mySelect').change(function () {
            var selectionOption = $(this).val();
            $('.content').hide();
            if (selectionOption == "1") { //all trainings
                populateTableAllTrainings().then(() => {
                    $('div#allTrainingsDIV').show();
                });
            }
            if (selectionOption == "2") { //upcoming trainings, with a future startingDate //need to color scheme green for those who have been automatic processed
                populateTableUpcomingTrainings().then(() => {
                    $('div#upcomingTrainingsDIV').show();
                });
            }
            if (selectionOption == "3") {//trainings with startingDate in the past
                populateTableCompletedTrainings().then(() => {
                    $('div#completedTrainingsDIV').show();
                });
            }
            if (selectionOption == "4") {//deleted trainings
                populateTableDeletedTrainings().then(() => {
                    $('div#deletedTrainingsDIV').show();
                });
            }
        });

        //populate table All trainings
        function populateTableAllTrainings() {
            return new Promise((resolve, reject) => {
                var URL = "/Training/getAll";
                getAJAXCall(URL).then((response) => {
                    var tableBody = $('#AllTrainingTable tbody');
                    tableBody.empty();
                    if (response.length === 0) {
                        $('div#AllTrainingTableDIV').hide();
                        $('div#emptyListHeaderDiv').html("<h2>Seems there are no Trainings Yet.</h2>").show();
                        resolve();
                    }
                    else {
                        $.each(response, function (index, training) {
                            var row = '<tr>' +
                                '<td>' + training.TrainingName + '</td>' +
                                '<td>' + training.DepartmentName + '</td>' +
                                '<td>' + formatDateTime(training.ClosingDate) + '</td>' +
                                '<td>' + formatDateTime(training.TrainingStartDate) + '</td>' +
                                '<td><button id="viewEmployeesBtn" value="' + training.TrainingID + '">View Employees</button></td>' +
                                '<td><button id="viewTraningPrerequisiteBtn"value="' + training.TrainingID + '">View Prerequisites</button></td>' +
                                '</tr>';
                            tableBody.append(row);
                        });
                        $('div#emptyListHeaderDiv').empty().hide();
                        $('div#AllTrainingTableDIV').show();
                        resolve();
                    }
                }).catch((error) => {
                    console.error(error);
                    toastr.error("Error on loading Trainings table");
                    reject();
                });
            });
        }

        //populate table upcoming Trainings
        function populateTableUpcomingTrainings() {
            return new Promise((resolve, reject) => {
                var URL = "/Training/getUpcomings";
                getAJAXCall(URL).then((response) => {
                    if (response) {
                        var tableBody = $('#UpcomingTrainingTable tbody');
                        tableBody.empty();
                        if (response.length === 0) {
                            $('div#UpcomingTrainingTable').hide();
                            $('div#upcomingTrainingEmptyListHeader').html("<h2>Seems there are no upcoming trainings</h2>");
                            resolve();
                        }
                        else {
                            $.each(response, function (index, training) {
                                var row = '<tr>' +
                                    '<td>' + training.TrainingName + '</td>' +
                                    '<td>' + training.NumberOfEnrollments + '</td>' +
                                    '<td>' + training.Capacity + '</td>' +
                                    '<td>' + formatDateTime(training.ClosingDate) + '</td>' +
                                    '<td>' + formatDateTime(training.TrainingStartDate) + '</td>' +
                                    '<td>' + training.Duration + '</td>' +
                                    '<td><button id="viewEmployeesBtn" value="' + training.TrainingID + '">Application List</button></td>' +
                                    '<td><button id="viewTraningPrerequisiteBtn" value="' + training.TrainingID + '">View Prerequisites</button></td>' +
                                    '<td>' + returnStatus(training.IsAutomaticProcessed) + '</td>';
                                if (training.IsAutomaticProcessed == false) {
                                    row = row + '<td><button id="UpdateTrainingBtn" value="' + training.TrainingID + '">Update</button>';
                                    if (training.NumberOfEnrollments == 0) {
                                        row = row + '<button id="DeleteTrainingBtn" value="' + training.TrainingID + '">Delete</button></td>';
                                    } else {
                                        row = row + '</td>'
                                    }
                                }
                                row = row + '</tr>';
                                tableBody.append(row);
                            });
                            $('div#upcomingTrainingEmptyListHeader').empty().hide();
                            $('div#UpcomingTrainingTableDiv').show();
                            resolve();
                        }
                    }
                    else {
                        toastr.error("Error in backend");
                        reject();
                    }
                }).catch((error) => {
                    console.error(error);
                    toastr.error('error loading in backend');
                    reject();
                });
            })
        }

        //populate table completed Trainings
        function populateTableCompletedTrainings() {
            return new Promise((resolve, reject) => {
                var URL = "/Training/GetCompletedTrainings";
                getAJAXCall(URL).then((response) => {
                    if (response) {
                        var tableBody = $('#completedTrainingTable tbody');
                        tableBody.empty();
                        if (response.length === 0) {
                            $("#completedTrainingTableDiv").hide();
                            $("#completedTrainingEmptyListHeader").html("<h2>Looks like there are no Training that has been completed (Automtic processed)</h2>").show();
                            resolve();
                        } else {
                            $.each(response, function (index, training) {
                                var row = '<tr>' +
                                    '<td>' + training.TrainingName + '</td>' +
                                    '<td>' + formatDateTime(training.TrainingStartDate) + '</td>' +
                                    '<td>' + training.Duration + '</td>' +
                                    '<td><button id="viewMoreDetailsBtn" value="' + training.TrainingID + '">View Details</button></td>' +
                                    '</tr>';
                                tableBody.append(row);
                            });
                            $('div#completedTrainingEmptyListHeader').empty().hide();
                            $('div#completedTrainingTableDiv').show();
                            resolve();
                        }
                    }
                    else {
                        toastr.error("error");
                    }
                }).catch((error) => {
                    console.error(error);
                    toastr.error("error on loading completed Trainigns");
                    reject();
                });
            });
        }


        //populate table Deleted Trainings
        function populateTableDeletedTrainings() {
            return new Promise((resolve, reject) => {
                var URL = "/Training/GetDeletedTrainings";
                getAJAXCall(URL).then((response) => {
                    if (response) {
                        var tableBody = $('#deletedTrainingTable tbody');
                        tableBody.empty();
                        if (response.length === 0) {
                            $('#deletedTrainingTableDiv').hide();
                            $('#deletedTrainingEmptyListHeader').html("<h2>There are not Trainings that have been deleted</h2>").show();
                            resolve();
                        } else {
                            $.each(response, function (index, training) {
                                var row = '<tr>' +
                                    '<td>' + training.TrainingName + '</td>' +
                                    '<td>' + training.Capacity + '</td>' +
                                    '</tr>';
                                tableBody.append(row);
                            });
                            $('div#deletedTrainingEmptyListHeader').empty().hide();
                            $('#deletedTrainingTableDiv').show();
                            resolve();
                        }
                    } else {
                        toastr.error("error");
                        reject();
                    }
                }).catch((error) => {
                    console.error(error);
                    toastr.error("error on loading Deleted trainings");
                    reject();
                });
            });
        }

        //When clicking on view employees btn
        $('.requestsTable tbody').on("click", "#viewEmployeesBtn", function () {
            var row = $(this).closest("tr");
            var selectedTrainingID = $(this).val();
            var selectedTrainingName = row.find("td:eq(0)").text();
            $('div#popupHeaderDiv').empty();
            $('div#popupHeaderDiv').html("<h3>Employees that has applied for " + selectedTrainingName + "</h3>");
            var trainingIDObj = { trainingID: selectedTrainingID };
            var serverCall = new ServerCall({ url: "/Enrollment/GetEmployeesAppliedForTraining", parameters: trainingIDObj, callMethod: "POST" });
            serverCall.fetchApiCall().then((response) => {
                if (response) {
                    $('.content').hide();
                    var tableBody = $('#employeeTable tbody');
                    tableBody.empty();
                    if (response.length === 0) {
                        $('div#employeesTableDiv').hide();
                        $('div#popupHeaderDiv').append("<br><h1>Looks Like nobody has applied for this training</h1>").fadeIn();
                        $('div#employeesInTrainingPopUp').show();
                    }
                    else {
                        $('div#popupHeaderDiv').append("<br><h4> Total of " + response.length + " applications received</h4>").show();
                        $.each(response, function (index, employee) {
                            var row = '<tr>' +
                                '<td>' + employee.FirstName + ' ' + employee.LastName + '</td>' +
                                '<td>' + employee.Email + '</td>' +
                                '<td>' + formatDateTime(employee.DateRegistered) + '</td>' +
                                '<td>' + employee.ManagerStatus + '</td>' +
                                '<td>' + employee.FinalStatus + '</td>' +
                                '</tr>';
                            tableBody.append(row);
                        });
                        $('div#popupHeaderDiv').show();
                        $('div#employeesTableDiv').show();
                        $('div#employeesInTrainingPopUp').show();
                    }
                }
                else {
                    toastr.error("Error loading Employees");
                }
            });
        });

        //when clicking on view Training Prerequisite
        $('.requestsTable tbody').on("click", "#viewTraningPrerequisiteBtn", function () {
            var URL = "/Training/GetPrerequisites";
            var row = $(this).closest("tr");
            var trainingID = $(this).val();
            var selectedTrainingName = row.find("td:eq(0)").text();
            var trainingobj = { trainingID: trainingID }
            var serverCall = new ServerCall({ url: URL, parameters: trainingobj, callMethod: "POST" });
            serverCall.fetchApiCall().then((response) => {
                if (response) {
                    $('.content').hide();
                    $('div#popupTrainingPrerequisiteContentDiv').empty();
                    if (response.result.length === 0) {
                        $('#headerTrainingPrerequisite').html("<h2>Looks like this training does not have any prerequisites</h2>");
                        $('#popupViewTrainingPrerequisiteDiv').show();
                    }
                    else {
                        $('#headerTrainingPrerequisite').html("<h2>Prerequisites For " + selectedTrainingName + "</h2>");
                        response.result.forEach(function (p) {
                            var paragraph = document.createElement('h6');
                            paragraph.textContent = ' - ' + p.Details;
                            $('div#popupTrainingPrerequisiteContentDiv').append(paragraph);
                        });
                        $('#popupViewTrainingPrerequisiteDiv').show();
                    }
                }
                else {
                    toastr.error("could not load prerequisites");
                }
            });
        });


        //when clicking on Update Training
        $('.requestsTable tbody').on('click', "#UpdateTrainingBtn", function () {
            //need to populate form with selected training details
            var URL = "/Training/GetTrainingToUpdateDetails";
            var selectedTrainingID = $(this).val();
            var trainingIDObj = { trainingID: selectedTrainingID };
            var serverCall = new ServerCall({ url: URL, parameters: trainingIDObj, callMethod: "POST" });
            serverCall.fetchApiCall().then((response) => {
                if (response) {
                    $('.content').hide();
                    $('#updatePopupDiv').show();
                    $('#TrainingName').val(response.TrainingName);
                    $('#TrainingCapacity').val(response.Capacity);
                    // Convert and set date values
                    document.getElementById('DeadlineRegistration').value = formatUnixTimestampForInput(response.ClosingDate);
                    document.getElementById('StartingDate').value = formatUnixTimestampForInput(response.TrainingStartDate);
                    $('#TrainingDuration').val(response.Duration);
                    $('#TrainingDescription').val(response.Description);
                    $('#updateBtn').attr("value", selectedTrainingID);
                } else {
                    toastr.error("Error loading Training Update Page");
                }
            });
        });

        //when clicking on delete training
        $('.requestsTable tbody').on('click', '#DeleteTrainingBtn', function () {
            var selectedTrainingID = $(this).val();
            Swal.fire({
                title: 'Are you sure?',
                text: 'You won\'t be able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    var URL = "/Training/Delete";
                    var trainingIDobj = { trainingID: selectedTrainingID };
                    var serverCall = new ServerCall({ url: URL, parameters: trainingIDobj, callMethod: "POST" });
                    serverCall.fetchApiCall().then((response) => {
                        if (response && response === true) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Training Deleted',
                                text: 'press OK to continue',
                                allowOutsideClick: false,
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location = "/Admin/ViewTrainingsView";
                                }
                            });
                        } else {
                            Swal.fire('Error!', 'Something Went Wrong, Training could not be deleted', 'error');
                        }
                    }).catch((error) => {
                        toastr.error("Error, Training Could not be deleted");
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    Swal.close();
                }
            });
        });

        //close button for update training
        $(document).on("click", "button#cancelUpdateBtn", function () {
            $('.content').hide();
            $("div#upcomingTrainingsDIV").show();
        })

        //close button for popup employees
        $(document).on("click", "button#closePopUpEmployeeBtn", function () {
            $('div#employeesInTrainingPopUp').hide();
            var selectedOption = $('#mySelect').val();
            if (selectedOption == "1") { $('div#allTrainingsDIV').show(); }
            if (selectedOption == "2") { $('div#upcomingTrainingsDIV').show(); }
            if (selectedOption == "3") { $('div#completedTrainingsDIV').show(); }
            if (selectedOption == "4") { $('div#deletedTrainingsDIV').show(); }
        });

        //close button for popup prerequisite
        $(document).on("click", "button#closePopupTrainingPrerequisiteBtn", function () {
            $('div#popupViewTrainingPrerequisiteDiv').hide();
            var selectedOption = $('#mySelect').val();
            if (selectedOption == "1") { $('div#allTrainingsDIV').show(); }
            if (selectedOption == "2") { $('div#upcomingTrainingsDIV').show(); }
            if (selectedOption == "3") { $('div#completedTrainingsDIV').show(); }
            if (selectedOption == "4") { $('div#deletedTrainingsDIV').show(); }
        });

        function getAJAXCall(URL) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    type: "GET",
                    url: URL,
                    data: null,
                    dataType: "json",
                    success: function (data) {
                        resolve(data);
                    },
                    error: function (data) {
                        reject(data);
                    }
                })
            });
        }
        function formatDateTime(date) {
            if (date) {
                var parsedDate = new Date(parseInt(date.substr(6)));
                return parsedDate.toLocaleDateString() + ' ' + parsedDate.toLocaleTimeString();
            } else {
                return 'No date';
            }
        }

        function returnStatus(booleanIsAutomaticProcessed) {
            if (booleanIsAutomaticProcessed == true) {
                return 'DONE';
            } else {
                return 'PENDING';
            }
        }
        function formatUnixTimestampForInput(date) {
            if (date) {
                var parsedDate = new Date(parseInt(date.substr(6)));
                return parsedDate.toLocaleDateString() + ' ' + parsedDate.toLocaleTimeString();
            } else {
                return 'No date';
            }
        }
        //flow
        $('#mySelect').trigger('change');

    });

    function isValidString(str) {
        var regex = /^[a-zA-Z0-9\s]*$/;
        return regex.test(str);
    }

    function validateForm() {
        var trainingName = document.getElementById('TrainingName').value;
        var trainingCapacity = document.getElementById('TrainingCapacity').value;
        var deadlineRegistration = document.getElementById('DeadlineRegistration').value;
        var startingDate = document.getElementById('StartingDate').value;
        var trainingDuration = document.getElementById('TrainingDuration').value;
        var TrainingDescription = document.getElementById('TrainingDescription').value;


        // Validate TrainingName
        if (trainingName.trim() === '') {

            toastr.error("Training Name cannot be empty.", '', { positionClass: 'toast-bottom-right', backgroundColor: '#4CAF50' });
            return;
        }
        // Validate special characters in TrainingName
        if (!isValidString(trainingName)) {

            toastr.error("Training Name cannot contain special characters.", '', { positionClass: 'toast-bottom-right', backgroundColor: '#4CAF50' });
            return;
        }

        // Validate TrainingCapacity
        if (parseInt(trainingCapacity) <= 0 || isNaN(trainingCapacity)) {
            toastr.error("Training Capacity should be greater than 0.", '', { positionClass: 'toast-bottom-right', backgroundColor: '#4CAF50' });
            return;
        }

        //validate TrainingDuration
        if (parseInt(trainingDuration) <= 0 || isNaN(trainingDuration)) {
            toastr.error("Training Capacity should be greater than 0.", '', { positionClass: 'toast-bottom-right', backgroundColor: '#4CAF50' });
            return;
        }

        // Validate StartingDate and DeadlineRegistration
        var startingDateObj = new Date(startingDate);
        var deadlineRegistrationObj = new Date(deadlineRegistration);
        if (startingDateObj <= deadlineRegistrationObj) {
            toastr.error("Starting Date should be greater than Deadline Registration.", '', { positionClass: 'toast-bottom-right', backgroundColor: '#4CAF50' });
            return;
        }

        submitFormData();
    }

    function submitFormData() {
        var form = document.getElementById('sampleForm');
        var formData = new FormData(form);
        var formDataJson = {};
        formData.forEach((value, key) => {
            if (formDataJson[key] !== undefined) {
                if (Array.isArray(formDataJson[key])) {
                    formDataJson[key].push(value);
                } else {
                    formDataJson[key] = [formDataJson[key], value];
                }
            } else {
                formDataJson[key] = value;
            }
        });

        //add trainingID to formdataJson
        var selectedTrainingID = document.getElementById('updateBtn').value;
        formDataJson['TrainingID'] = selectedTrainingID;

        //send formdataJson to training Controller
        var serverCall = new ServerCall({ url: "/Training/UpdateTraining", parameters: formDataJson, callMethod: "POST" });
        serverCall.fetchApiCall().then((response) => {
            if (response.result == true) {
                //swal success;
                Swal.fire({
                    icon: 'success',
                    title: 'Training Updated',
                    text: 'press OK to continue',
                    allowOutsideClick: false,
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location = "/Admin/ViewTrainingsView";
                    }
                });
            } else {
                toastr.error("could not insert New Training");
            }
        }).catch(error => {
            console.error("error inserting new training");
            toastr.error('could not insert New training');
        });

    }

</script>


<!--Dropdonwlist DIV-->
<div style="text-align:right; padding:10px;">
    <span>
        <select id="mySelect" class="custom-select" style="display: inline; margin-left:10px; font-size:20px; ">
            <option value="1" selected> All Trainings</option>
            <option value="2">Upcoming Trainings</option>
            <option value="3">Completed Trainings</option>
            <option value="4">Deleted Trainings</option>
        </select>
    </span>
</div>

<div id="second-container">

    <!--All trainings-->
    <div id="allTrainingsDIV" class="content">
        <div id="headerAllTrainingDiv"><h2>All Trainings</h2></div>
        <div id="emptyListHeaderDiv" style="display:none;"></div>
        <div id="AllTrainingTableDIV" class="TableViewDiv" style="display:none;">
            <table id="AllTrainingTable" border="1" class="requestsTable">
                <thead>
                    <tr>
                        <th>Training Name</th>
                        <th>Department Favoured</th>
                        <th>Training Registration Deadline</th>
                        <th>Training Start Date</th>
                        <th>Employees enrolled</th>
                        <th>Prerequisites</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

    </div>

    <!--Upcoming Trainings-->
    <div id="upcomingTrainingsDIV" class="content">
        <h2>Upcoming Trainings</h2>
        <div id="upcomingTrainingEmptyListHeader" style="display:none;"></div>
        <div id="UpcomingTrainingTableDiv" class="TableView" style="display:none;">
            <table id="UpcomingTrainingTable" border="1" class="requestsTable">
                <thead>
                    <tr>
                        <th>Training Name</th>
                        <th>Number of applications</th>
                        <th>Number of Seats Available</th>
                        <th>Registration Deadline</th>
                        <th>Start Date</th>
                        <th>Training Duration(days)</th>
                        <th>Application List</th>
                        <th>Prerequisites</th>
                        <th>Automatic Processing</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>

    <!--completed Trainings-->
    <div id="completedTrainingsDIV" class="content">
        <h2>Completed Trainings</h2>
        <div id="completedTrainingEmptyListHeader" style="display:none;"></div>
        <div id="completedTrainingTableDiv" class="TableView" style="display:none;">
            <table id="completedTrainingTable" border="1" class="requestsTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Start Date</th>
                        <th>Duration(days)</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>

                </tbody>
            </table>
        </div>
    </div>

    <!--deleted trainings-->
    <div id="deletedTrainingsDIV" class="content">
        <h2>Deleted Trainings</h2>
        <div id="deletedTrainingEmptyListHeader" style="display:none;"></div>
        <div id="deletedTrainingTableDiv" class="TableView" style="display:none;">
            <h5>A deleted Training does not have any employee application</h5>
            <hr />
            <table id="deletedTrainingTable" border="1" class="requestsTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Training Seats</th>
                    </tr>
                </thead>
                <tbody>

                </tbody>
            </table>
        </div>
    </div>


    <!--popup view Employees-->
    <div id="employeesInTrainingPopUp" class="content">
        <div id="popupHeaderDiv"></div>
        <div id="employeesTableDiv" class="TableView" style="display:none;">
            <hr />
            <table id="employeeTable" border="1" class="requestsTable">
                <thead>
                    <tr>
                        <th>Employee Name</th>
                        <th>Employee Email</th>
                        <th>Date Registered</th>
                        <th>Manager Status</th>
                        <th>Final Status</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
        <hr />
        <div id="closeBtnDiv">
            <button id="closePopUpEmployeeBtn">Close</button>
        </div>
    </div>


    <!--popup view training prerequisite-->
    <div id="popupViewTrainingPrerequisiteDiv" class="content">
        <div id="headerTrainingPrerequisite"></div>
        <hr />
        <div id="popupTrainingPrerequisiteContentDiv"></div>
        <hr />
        <div><button id="closePopupTrainingPrerequisiteBtn">Close</button></div>
    </div>

    <!--Update training popup view-->
    <div id="updatePopupDiv" class="content">
        <div id="form-div">
            <form id="sampleForm">
                <h2>Update Training</h2>

                <label for="TrainingName">Training Name:</label>
                <input type="text" id="TrainingName" name="TrainingName" required>
                <br /> <br />

                <label for="TrainingCapacity">Training Capacity:</label>
                <input type="number" id="TrainingCapacity" name="TrainingCapacity" required>
                <br /><br />

                <label for="DeadlineRegistration">Deadline Registration:</label>
                <input type="datetime-local" id="DeadlineRegistration" name="DeadlineRegistration" required>
                <br /><br />

                <label for="StartingDate">Starting Date:</label>
                <input type="datetime-local" id="StartingDate" name="StartingDate" required>
                <br /><br />

                <label for="TrainingDuration">Training Duration(Days)</label>
                <input type="number" id="TrainingDuration" name="TrainingDuration" required />
                <br /><br />

                <label for="TrainingDescription">Training Description</label>
                <textarea id="TrainingDescription" name="TrainingDescription" rows="4" cols="50"></textarea>
                <br />
                <br />

                <button id="cancelUpdateBtn">Cancel</button>
                <button type="submit" id="updateBtn" onclick="validateForm()">Update Training</button>
            </form>
        </div>
    </div>



























</div>
